default_platform :ios

platform :ios do

################################################################################################################################################################

  desc "Firebase Distribution으로 테스트 배포 진행"
  lane :distribute_dev do | options |

  # Changelog
  changelog = read_changelog(
    changelog_path: './CHANGELOG.md',
    section_identifier: '[Unreleased]',
    excluded_markdown_elements: ['-', '###']
  )

  # Version, Build Number
  version_number = get_version_number_from_plist(
    scheme: "GitTime"
  )
  build_number = get_build_number_from_plist(
    scheme: "GitTime"
  )

  time = Time.new

  output_name = "#{ENV['IPA_NAME']}_#{version_number}(#{build_number}).ipa"
  full_output = "#{ENV['FASTLANE_PATH']}#{version_number}/#{time.strftime("%Y-%m-%d")}/Build(#{build_number})#{ENV['DEVELOP_IPA_PATH']}"

  match(
    type: "development",
    app_identifier: ENV['APPLE_APP_IDENTIFIER'],
    readonly: true
  )

  gym(
    workspace: ENV['XCWORKSPACE_NAME'],
    scheme: ENV['SCHEMA_FOR_DEVELOP'],
    silent: true,
    clean: true,
    output_directory: full_output,
    output_name: output_name,
    export_method: "development",
  )

  if options[:firebase_upload] == true
    firebase_upload(
    groups:options[:groups],
    changelog: changelog,
    beta: true
  )
  end

  if options[:slack_notify] == true
    message_to_slack(
      version: version_number,
      build: build_number,
      changelog: changelog,
      beta: true
    )
  end

  end


################################################################################################################################################################

  desc "인증서 갱신"
  lane :certificate do
    match(type: "development", app_identifier: ENV['APPLE_APP_IDENTIFIER'])
    match(type: "adhoc", app_identifier: ENV['APPLE_APP_IDENTIFIER'])
    match(type: "appstore", app_identifier: ENV['APPLE_APP_IDENTIFIER'])
  end

################################################################################################################################################################

  desc "Firebase distribution을 동작하게 하는 별도의 lane"
  lane :firebase_upload do |options|

    groups = options[:groups]

    changelog = options[:changelog]

    firebaseAppId = ENV['FIREBASE_APP_ID']

    firebase_app_distribution(
      app: firebaseAppId,
      ipa_path: lane_context[SharedValues::IPA_OUTPUT_PATH],
      firebase_cli_token: ENV['FIREBASE_APP_TOKEN'],
      groups: groups,
      release_notes: changelog,
      debug: false
    )

  end

  lane :message_to_slack do|options|

    bundleIdentifier = ENV['APPLE_APP_IDENTIFIER']

  slack(
     pretext: ENV['SLACK_MESSAGE_FIREBASE'],
     slack_url: ENV['SLACK_URL'],
     channel: ENV['SLACK_CHANNEL'],
     payload: {
       "Build Date" => Time.new.to_s,
       "Built by" => ENV['SLACK_USER_ID'],
       "Bundle Identifier" => bundleIdentifier,
       "Version" => "#{options[:version]} (#{options[:build]})",
       "Change log" => "#{options[:changelog]}"
     },
     use_webhook_configured_username_and_icon: false,
     default_payloads: [:git_branch, :git_author],
     attachment_properties: {
       thumb_url: ENV['SLACK_THUMBNAIL_URL']
     }
   )
 end

################################################################################################################################################################
 lane :test_slack do |options|
  bundleIdentifier = ENV['APPLE_APP_IDENTIFIER']
  slack(
    pretext: ENV['SLACK_MESSAGE_FIREBASE'],
    slack_url: ENV['SLACK_URL'],
    channel: ENV['SLACK_CHANNEL'],
    username: "Kanz",
    icon_url: ENV['SLACK_IMAGE_URL_FIREBASE'],
    use_webhook_configured_username_and_icon: false,
    payload: {
       "Build Date" => Time.new.to_s,
       "Built by" => ENV['SLACK_USER_ID'],
       "Bundle Identifier" => bundleIdentifier,
       "Version" => "#{options[:version]} (#{options[:build]})",
       "Change log" => "#{options[:changelog]}"
     },
    default_payloads: [:git_branch, :git_author],
    attachment_properties: {
      thumb_url: ENV['SLACK_THUMBNAIL_URL']
    }
  )
 end

################################################################################################################################################################
  after_all do |lane|
    notification(
      subtitle:ENV['NOTIFICATION_TITLE'],
      message:ENV['NOTIFICATION_MESSAGE'],
      sound:ENV['NOTIFICATION_SOUND']
    )
  end



end

