default_platform :ios

platform :ios do



  desc "Beta Deployment to TestFlight"
  lane :develop do | options |

    changelog = read_changelog(
      changelog_path: './CHANGELOG.md',
      section_identifier: '[Unreleased]',
      excluded_markdown_elements: ['-', '###']
    )

    version_number = get_version_number_from_plist()
    build_number = get_build_number_from_plist()

    time = Time.new

    output_name = "#{ENV[‘IPA_NAME’]}_#{version_number}(#{build_number}).ipa"
    full_output = "#{ENV[‘FASTLANE_PATH’]}#{version_number}/#{time.strftime("%Y-%m-%d")}/Build(#{build_number})#{ENV[‘DEVELOP_IPA_PATH’]}"

    # add_badge(shield: "#{version_number}-#{build_number}-dark", no_badge: true)

    match(
      type: "development",
      app_identifier: ENV['APPLE_APP_IDENTIFIER'],
      readonly: true
    )

    gym(
      workspace: ENV['XCWORKSPACE_NAME'],
      include_bitcode: true,
      silent: true,
      clean: true,
      include_symbols: true,
      output_directory: full_output,
      output_name: output_name,
      export_method: "development"
    )

    if options[:firebase_upload] == true
      firebase_upload(
        groups:options[:groups],
        email:options[:email],
        changelog: changelog,
        beta: true
      )
   end

    if options[:slack_notify] == true
      message_to_slack(
       version: version_number,
       build: build_number,
       changelog: changelog,
       beta: true
     )
    end
  end

  lane :firebase_upload do |options|

    emails = []
    groups = ""

    groupName = options[:groups]
    emailList = options[:emails]
    changelog = options[:changelog]
    beta = options[:beta]
    notification = false

    if groupName == "iOS"
      print("[+] Selected iOS Team (@ios) \n")
      groups = "iOS"
    elsif groupName == "qa-team"
      print ("[+] Selected QA Team (@qaqa)\n")
      groups = "qa-mini"
    end

    if emailList
      emails = emailList.split(',')
    end

    if options[:slient] == false
      print ("[+] Selected Slient\n")
      notification = true
    end

    firebaseAppId = ENV['FIREBASE_APP_ID']

    if beta == true
      firebaseAppId = ENV['FIREBASE_APP_ID_BETA']
    end

    firebase_app_distribution(
        app: firebaseAppId,
        ipa_path: lane_context[SharedValues::IPA_OUTPUT_PATH],
        firebase_cli_token: ENV['FIREBASE_APP_TOKEN'],
        groups: groups,
        release_notes: changelog,
        debug: false
    )

  end

  lane :message_to_slack do|options|

    bundleIdentifier = ENV['APPLE_APP_IDENTIFIER']

    if options[:beta] == true
      bundleIdentifier = ENV['APPLE_APP_IDENTIFIER_BETA']
    end

  slack(
     pretext: ENV['SLACK_MESSAGE'],
     slack_url: ENV['SLACK_URL'],
     channel: ENV['SLACK_CHANNEL'],
     payload: {
       "Build Date" => Time.new.to_s,
       "Built by" => ENV['SLACK_USERID'],
       "Bundle Identifier" => bundleIdentifier,
       "Version" => "#{options[:version]}(#{options[:build]})",
       "Change log" => "#{options[:changelog]}"
     },
     use_webhook_configured_username_and_icon: true,
     default_payloads: [:lane, :git_branch, :git_author],
     attachment_properties: {
       thumb_url: ENV['SLACK_IMAGE_URL']
     }
   )
 end

  after_all do |lane|
    notification(
      subtitle:ENV['NOTIFICATION_TITLE'],
      message:ENV['NOTIFICATION_MESSAGE'],
      sound:ENV['NOTIFICATION_SOUND']
      )

    #아이콘 이미지를 원상복구 합니다
    #reset_git_repo(
    #  force: true,
    #  files: [
    #    ENV['APP_ICON_PATH']
    #  ]
    #)
   end


  lane :new_member do |options|

    username = options[:username]
    uuid = options[:uuid]
    type = options[:type]

    if 0 < username.length && 0 < uuid.length
      staff_name_prefix = "🧑‍💻User"
      device_prefix = "📱Device"
      device_name = ""

      if "user" == type
         device_name = "#{staff_name_prefix}--#{username}"
      end

      if "device" == type
          device_name = "#{device_prefix}--#{username}"
      end

      register_devices(
        devices: {
          device_name => uuid
        }
      )
    end
  end

  lane :release do
    sync_code_signing(type: "appstore")
    build_app(scheme: "GitTime")
    upload_to_app_store(force: true)
  end


end

